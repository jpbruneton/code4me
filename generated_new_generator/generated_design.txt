```json
[
    {
        "class": "ChatGPTInterface",
        "description": "Interact with the ChatGPT API to obtain responses for given prompts.",
        "attributes": [
            {"name": "api_key", "type": "str"},
            {"name": "model", "type": "str"}
        ],
        "methods": [
            {
                "name": "__init__",
                "description": "Initialize the ChatGPT interface with an API key and model name.",
                "parameters": [
                    {"name": "api_key", "type": "str"},
                    {"name": "model", "type": "str"}
                ],
                "return": "None"
            },
            {
                "name": "chat",
                "description": "Send a prompt to ChatGPT and receive the response.",
                "parameters": [
                    {"name": "prompt", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "handle_errors",
                "description": "Handle potential API call errors or rate limits.",
                "parameters": [
                    {"name": "error", "type": "Exception"}
                ],
                "return": "None"
            },
            {
                "name": "switch_model",
                "description": "Switch models or adjust configurations if necessary.",
                "parameters": [
                    {"name": "new_model", "type": "str"}
                ],
                "return": "None"
            }
        ]
    },
    {
        "class": "DesignProcessor",
        "description": "Process design tasks using ChatGPT responses, focusing on feedback loops and task management.",
        "attributes": [
            {"name": "chat_gpt", "type": "ChatGPTInterface"}
        ],
        "methods": [
            {
                "name": "generate_design",
                "description": "Generate the initial design based on the initial prompt.",
                "parameters": [
                    {"name": "initial_prompt", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "evaluate_design",
                "description": "Critique the current design for its potential to achieve the initial goal.",
                "parameters": [
                    {"name": "initial_prompt", "type": "str"},
                    {"name": "current_design", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "optimize_design",
                "description": "Enhanced method to optimize design with sequential feedback and dependency management.",
                "parameters": [
                    {"name": "initial_prompt", "type": "str"},
                    {"name": "feedback", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "combine_designs",
                "description": "Combine the initial design with feedback from a critic.",
                "parameters": [
                    {"name": "design", "type": "str"},
                    {"name": "critic_feedback", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "explain_feedback",
                "description": "Explain why certain improvements are necessary in the feedback loop.",
                "parameters": [
                    {"name": "feedback", "type": "str"}
                ],
                "return": "str"
            }
        ]
    },
    {
        "class": "CodeProcessor",
        "description": "Generate and improve code using designs and feedback, while managing context and state.",
        "attributes": [
            {"name": "chat_gpt", "type": "ChatGPTInterface"}
        ],
        "methods": [
            {
                "name": "generate_code",
                "description": "Generate code for given tasks in the design.",
                "parameters": [
                    {"name": "current_code", "type": "str"},
                    {"name": "task", "type": "dict"}
                ],
                "return": "str"
            },
            {
                "name": "review_code",
                "description": "Provide a global review of the current code against the initial prompt.",
                "parameters": [
                    {"name": "initial_prompt", "type": "str"},
                    {"name": "current_code", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "improve_code",
                "description": "Improve the current code using feedback and improvements, with strategies for complexity reduction and readability.",
                "parameters": [
                    {"name": "initial_prompt", "type": "str"},
                    {"name": "current_code", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "validate_code",
                "description": "Introduce validation checks for generated code segments to highlight functional errors early.",
                "parameters": [
                    {"name": "code", "type": "str"}
                ],
                "return": "str"
            }
        ]
    },
    {
        "class": "FileManager",
        "description": "Manage file operations for code and design files, ensuring seamless integration.",
        "attributes": [
            {"name": "folder_name", "type": "str"}
        ],
        "methods": [
            {
                "name": "create_folder",
                "description": "Create a folder if it doesn't already exist.",
                "parameters": [],
                "return": "None"
            },
            {
                "name": "save_to_file",
                "description": "Save content to a specified file, ensuring protection against hardcoded sensitive data.",
                "parameters": [
                    {"name": "content", "type": "str"},
                    {"name": "file_path", "type": "str"}
                ],
                "return": "None"
            },
            {
                "name": "load_from_file",
                "description": "Load content from a specified file.",
                "parameters": [
                    {"name": "file_path", "type": "str"}
                ],
                "return": "str"
            },
            {
                "name": "get_current_code_version",
                "description": "Retrieve the current version of the code.",
                "parameters": [
                    {"name": "version", "type": "Optional[int]"}
                ],
                "return": "str"
            },
            {
                "name": "clear_file",
                "description": "Clear the contents of a specified file.",
                "parameters": [
                    {"name": "file_path", "type": "str"}
                ],
                "return": "None"
            }
        ]
    },
    {
        "class": "ProjectContext",
        "description": "Manage the overall context and state of the project, coordinating between processors.",
        "attributes": [
            {"name": "design_processor", "type": "DesignProcessor"},
            {"name": "code_processor", "type": "CodeProcessor"},
            {"name": "file_manager", "type": "FileManager"},
            {"name": "current_design", "type": "str"},
            {"name": "current_code", "type": "str"}
        ],
        "methods": [
            {
                "name": "initialize_project",
                "description": "Initialize the project with design and code generation based on the initial prompt.",
                "parameters": [
                    {"name": "initial_prompt", "type": "str"}
                ],
                "return": "None"
            },
            {
                "name": "iterate_project",
                "description": "Iterate over design and code to improve and finalize.",
                "parameters": [],
                "return": "None"
            },
            {
                "name": "manage_api_key",
                "description": "Securely manage the API key using environment variables or a secure vault.",
                "parameters": [],
                "return": "str"
            }
        ]
    },
    {
        "function": "run",
        "description": "Main function to execute the entire process: design generation, code production, and iterative improvement.",
        "parameters": [
            {"name": "initial_prompt", "type": "str"},
            {"name": "folder_name", "type": "str", "default": "'generated_scripts'"}
        ],
        "return": "None"
    }
]
```


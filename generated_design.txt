[{'name': 'generate_binary_trees', 'purpose': 'Generate all possible binary tree structures from a list of random integer leaf values.', 'variables': {'leaf_values': 'List[int]'}, 'return_value': 'List[TreeNode] representing the root nodes of possible binary trees.'}, {'name': 'build_tree_from_index', 'purpose': 'Build a binary tree given starting index and leaf nodes, ensuring each parent node equals the sum of its children.', 'variables': {'leaf_values': 'List[int]', 'start_index': 'int', 'end_index': 'int'}, 'return_value': 'TreeNode representing the root of a valid binary tree created from leaf values within the specified index range.'}, {'name': 'compute_sum', 'purpose': 'Compute the root node value of a tree given its structure to verify it meets the target root value.', 'variables': {'tree': 'TreeNode'}, 'return_value': 'int representing the sum value of the tree rooted at the given node.'}, {'name': 'verify_root_value', 'purpose': 'Check if a binary tree fulfills the condition that its root value matches the target root value.', 'variables': {'tree': 'TreeNode', 'target_value': 'int'}, 'return_value': 'bool indicating whether the root value matches the target value.'}, {'name': 'run', 'purpose': 'Execute the program to generate binary trees with given conditions and print those matching the target root value.', 'variables': {'leaf_values': 'List[int]', 'target_value': 'int'}, 'return_value': 'None'}, {'name': 'TreeNode', 'purpose': 'Define a data structure for a node in a binary tree.', 'fields': {'value': 'int', 'left': 'Optional[TreeNode]', 'right': 'Optional[TreeNode]'}}, {'name': 'generate_binary_trees', 'purpose': 'Generate all possible binary tree structures from a list of random integer leaf values.', 'variables': {'leaf_values': 'List[int]', 'target_value': 'int'}, 'return_value': 'List[TreeNode] representing the root nodes of possible binary trees that meet the root value condition.'}, {'name': 'build_tree_from_leaves', 'purpose': 'Build a binary tree structure recursively from a list of leaves and check it against the target root value.', 'variables': {'leaf_values': 'List[int]'}, 'return_value': 'List[TreeNode] representing all possible valid binary trees.'}, {'name': 'construct_trees', 'purpose': 'Recursively construct all possible trees from a list of nodes and combine them to form a new root.', 'variables': {'nodes': 'List[TreeNode]'}, 'return_value': 'List[TreeNode] representing all possible root nodes from the given nodes.'}, {'name': 'verify_and_filter_trees', 'purpose': 'Verify if the constructed trees meet the target root value and filter out invalid trees.', 'variables': {'trees': 'List[TreeNode]', 'target_value': 'int'}, 'return_value': 'List[TreeNode] consisting of trees with valid root values.'}]

